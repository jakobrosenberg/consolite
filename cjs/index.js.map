{"version":3,"sources":["../esm/index.mjs"],"names":["defaults","filter","level","levels","error","warn","debug","trace","noop","x","escapeRegExp","str","replace","escapeIfString","canBind","prop","console","Consolite","prefix","Proxy","_levels","get","target","parent","set","value","createLogger","push","withinLevel","passesFilter","join","match","shouldPrint","Object","keys","forEach","defineProperty","prefixes","map","p","bind","_level","val","_filter","root","child","assign"],"mappings":"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","sourcesContent":["/**\n * @callback Filter\n * @param {string[]} prefixes\n */\n\n/**\n * @typedef {Object} Logger\n * @prop {createLogger} create Creates new logger.\n * @prop {createLogger} createChild Creates a child logger. Prefix will be inherited. Level and levels will be inherited if undefined.\n * @prop {createLogger} createParent Creates a parent logger. Prefix will be inherited. Level and levels will be inherited if undefined.\n * @prop {Object.<string, number>} levels\n * @prop {number} level\n * @prop {Filter|string|RegExp} filter\n * @prop {Logger} root\n * @prop {Logger} parent\n */\n\nconst defaults = {\n  filter: '',\n  level: 3,\n  levels: {\n    default: 3,\n    error: 1,\n    warn: 2,\n    debug: 4,\n    trace: 4,\n  },\n}\n\nconst noop = x => x\n\n// $& means the whole matched string\nconst escapeRegExp = str => str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\nconst escapeIfString = str => (typeof str === 'string' ? escapeRegExp(str) : str)\nconst canBind = prop => typeof console[prop] === 'function'\n\nexport class Consolite {\n  prefix = []\n  _filter = null\n  _level = null\n  _levels = {}\n  parent = null\n\n  constructor(...prefix) {\n    this.prefix.push(...prefix)\n\n    const withinLevel = prop => this.levels[prop] <= this.level\n    const passesFilter = () =>\n      typeof this.filter === 'function'\n        ? this.filter(prefix)\n        : prefix.join('').match(escapeIfString(this.filter))\n    const shouldPrint = prop => withinLevel(prop) && passesFilter() && canBind(prop)\n\n    // attach console methods\n    Object.keys(console).forEach(prop =>\n      Object.defineProperty(this, prop, {\n        get: () => {\n          const prefixes = prefix.map(p => typeof p === 'string' ? p : p(prop, this))\n          return shouldPrint(prop) ? console[prop].bind(console, ...prefixes) : noop\n        },\n      }),\n    )\n  }\n\n  get level() {\n    return this._level ?? this.parent?.level ?? defaults.level\n  }\n  set level(val) {\n    this._level = val\n  }\n  get filter() {\n    return this._filter ?? this.parent?.filter ?? defaults.filter\n  }\n  set filter(val) {\n    this._filter = val\n  }\n  get root() {\n    return this.parent?.root || this\n  }\n\n  levels = new Proxy(this._levels, {\n    get: (target, prop) =>\n      target[prop] ||\n      target.default ||\n      this.parent?.levels[prop] ||\n      this.parent?.levels.default ||\n      defaults.levels[prop] ||\n      defaults.levels.default,\n    set: (target, prop, value) => (target[prop] = value),\n  })\n\n  createChild(...prefix) {\n    const child = createLogger(...this.prefix, ...prefix)\n    child.parent = this\n    return child\n  }\n\n  createParent(...prefix) {\n    return createLogger(...prefix, ...this.prefix)\n  }\n\n  create = createLogger\n}\n\n/**\n * @callback PrefixFn\n * @param {string} method console method, eg. log, debug etc...\n */\n\n/** @typedef {Consolite & Console} ConsoliteLogger */\n\n/**\n * @param {(string|PrefixFn)[]} prefix\n * @returns {ConsoliteLogger}\n */\nexport const createLogger = (...prefix) => Object.assign(new Consolite(...prefix))\n\n "],"file":"index.js"}